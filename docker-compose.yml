x-logging: &default-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "10"
      compress: "true"


services:
  bitwarden:
    # Standard Bitwarden is very resource-heavy and cannot run on micro cloud instances
    # Vaultwarden is a Rust (mostly) feature-complete implementation of Bitwarden
    # https://github.com/dani-garcia/vaultwarden
    image: vaultwarden/server:latest-alpine
    restart: always
    container_name: bitwarden
#    depends_on:
#    - proxy
#    <<: *default-logging
    volumes:
    - ${PWD}/bitwarden:/data
    environment:
    - LOG_FILE=/data/bitwarden.log
    - SHOW_PASSWORD_HINT=false
    - DOMAIN=http://${DOMAIN}          # DOMAIN is set in .env but doesn't have protocol prefix
    - IP_HEADER=X-Real-IP
    - ADMIN_TOKEN                       # Value-less variables are set in .env
    - SIGNUPS_ALLOWED
    - SMTP_HOST
    - SMTP_FROM
    - SMTP_FROM_NAME=Bitwarden (${DOMAIN})
    - SMTP_PORT
    - SMTP_SECURITY
    - SMTP_USERNAME
    - SMTP_PASSWORD
    - PUSH_ENABLED
    - PUSH_INSTALLATION_ID
    - PUSH_INSTALLATION_KEY
    - YUBICO_CLIENT_ID
    - YUBICO_SECRET_KEY
    - YUBICO_SERVER
    - ORG_CREATION_USERS
    - TZ


  backup:
    #build: ./docker/backup                                     # backup, in case container registry is not responsive
    image: ghcr.io/dadatuputi/bwgc_backup:master                # from https://github.com/dadatuputi/bwgc_backup
    restart: on-failure
    container_name: backup
    depends_on:
    - bitwarden
    <<: *default-logging
    volumes:
      - ${PWD}/.env:/.env:ro
      - ${PWD}/bitwarden:/data
      - ${PWD}/bitwarden/rclone:/data/rclone
      - ${PWD}/bitwarden/backups:/data/backups
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
    - BACKUP                            # Value-less variables are set in .env
    - BACKUP_SCHEDULE
    - BACKUP_DAYS
    - BACKUP_DIR
    - BACKUP_ENCRYPTION_KEY
    - BACKUP_EMAIL_TO
    - BACKUP_EMAIL_NOTIFY
    - BACKUP_RCLONE_CONF
    - BACKUP_RCLONE_DEST
    - BACKUP_ENV
    - SMTP_HOST
    - SMTP_FROM
    - SMTP_FROM_NAME=Bitwarden Backup (${DOMAIN})
    - SMTP_PORT
    - SMTP_SECURITY
    - SMTP_USERNAME
    - SMTP_PASSWORD
    - TZ

  watchtower:
    # Watchtower will pull down your new image, gracefully shut down your existing container
    # and restart it with the same options that were used when it was deployed initially
    # https://github.com/containrrr/watchtower
    image: containrrr/watchtower
    restart: always
    container_name: watchtower
    <<: *default-logging
    depends_on:
    - bitwarden
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    environment:
    - WATCHTOWER_CLEANUP=true
    - WATCHTOWER_SCHEDULE
    - TZ

  Cloudflared:
    image: Cloudflare/Cloudflared:latest
    container_name: Cloudflared
    restart: always
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=${Cloudflare_TUNNEL_TOKEN}

